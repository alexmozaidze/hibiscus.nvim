*hibiscus.txt*                            Opinionated fennel macros for neovim

==============================================================================
Table of Contents                                 *hibiscus-table-of-contents*

1. Hibiscus.nvim                                      |hibiscus-hibiscus.nvim|
  - Rational                                               |hibiscus-rational|
2. Installation                                        |hibiscus-installation|
3. Packer Macros                                      |hibiscus-packer-macros|
4. Neovim Macros                                      |hibiscus-neovim-macros|
  - keymaps                                                 |hibiscus-keymaps|
  - autocmds                                               |hibiscus-autocmds|
  - commands                                               |hibiscus-commands|
  - misc                                                       |hibiscus-misc|
  - vim options                                         |hibiscus-vim-options|
  - variables                                             |hibiscus-variables|
5. Core Macros                                          |hibiscus-core-macros|
  - fstring                                                 |hibiscus-fstring|
  - pretty print                                       |hibiscus-pretty-print|
  - general                                                 |hibiscus-general|
  - checking values                                 |hibiscus-checking-values|
  - unary operators                                 |hibiscus-unary-operators|
  - string concat                                     |hibiscus-string-concat|
  - table merging                                     |hibiscus-table-merging|
6. End Credits                                          |hibiscus-end-credits|

==============================================================================
1. Hibiscus.nvim                                      *hibiscus-hibiscus.nvim*


  :hibiscus: Highly opinionated macros to elegantly write your neovim config.


Companion library for tangerine
<https://github.com/udayvir-singh/tangerine.nvim>, but it can also be used
standalone.

RATIONAL                                                   *hibiscus-rational*


- :candy: Syntactic eye candy over hellscape of lua api
- :tanabata_tree: Provides missing features in both fennel and nvim api


==============================================================================
2. Installation                                        *hibiscus-installation*


- Create file `plugin/1-tangerine.lua` to bootstrap hibiscus:


>
    -- ~/.config/nvim/plugin/tangerine.lua
    
    -- pick your plugin manager, default [standalone]
    local pack = "tangerine" or "packer" or "paq"
    
    local function bootstrap (url)
        local name = url:gsub(".*/", "")
        local path = vim.fn.stdpath [[data]] .. "/site/pack/".. pack .. "/start/" .. name
    
        if vim.fn.isdirectory(path) == 0 then
            print(name .. ": installing in data dir...")
    
            vim.fn.system {"git", "clone", "--depth", "1", url, path}
    
            vim.cmd [[redraw]]
            print(name .. ": finished installing")
        end
    end
    
    bootstrap "https://github.com/udayvir-singh/hibiscus.nvim"
<



- Require a macro library at top of your modules:


>
    ; require all macros
    (require-macros :hibiscus.core)
    (require-macros :hibiscus.vim)
    
    ; require selected macros
    (import-macros {: fstring} :hibiscus.core)
    (import-macros {: map!}    :hibiscus.vim)
<


:tada: now start using these macros in your config

------------------------------------------------------------------------------

                                                             *hibiscus-Packer*

Packer                                 You can use packer to manage hibiscus
                                       afterwards:


>
    (require-macros :hibiscus.packer)
    
    (packer-setup)
    
    (packer
      (use! :udayvir-singh/hibiscus.nvim))
<


                                                                *hibiscus-Paq*

>
    (local paq (require :paq))
    
    (paq {
      :udayvir-singh/hibiscus.nvim
    })
<


==============================================================================
3. Packer Macros                                      *hibiscus-packer-macros*

>
    (require-macros :hibiscus.packer)
<


                                                       *hibiscus-packer-setup*

packer-setup                           (packer-setup {opts*})


Bootstraps packer and calls packer.init function with {opts*}.

                                                             *hibiscus-packer*

packer                                 (packer {…})


Wrapper around packer.startup function, automatically adds packer to plugin
list and syncs it.

                                                               *hibiscus-use!*

use!                                   (use! {name} {…})


Much more lisp friendly wrapper over packer.use function.

EXAMPLES: ~

>
    (packer
      (use! :udayvir-singh/tangerine.nvim)
    
      (use! :udayvir-singh/hibiscus.nvim
            :requires ["udayvir-singh/tangerine.nvim"])
    
      (use! :some-plugin
            :module "path/module" ; automatically requires that module
            ...))
<


==============================================================================
4. Neovim Macros                                      *hibiscus-neovim-macros*

>
    (require-macros :hibiscus.vim)
    ; or
    (import-macros {: augroup!} :hibiscus.vim)
<


KEYMAPS                                                     *hibiscus-keymaps*

                                                               *hibiscus-map!*

map!                                   (map! {args} {lhs} {rhs} {desc*})


Defines vim keymap for the given modes from {lhs} to {rhs}

ARGUMENTS: ~

{args} can contain the following values:

>
    ; modes |                   options                           |
    [ nivcx  :remap :verbose :buffer :nowait :expr :unique :script ]
<



- `verbose`: opposite to `silent`
- `remap`: opposite to `noremap`


EXAMPLES: ~

>
    ;; -------------------- ;;
    ;;      VIMSCRIPT       ;;
    ;; -------------------- ;;
    (map! [n :buffer] :R "echo &rtp")
    (map! [n :remap]  :P "<Plug>(some-function)")
    
    
    ;; -------------------- ;;
    ;;        FENNEL        ;;
    ;; -------------------- ;;
    (map! [nv :expr] :j
          '(if (> vim.v.count 0) "j" "gj"))
    
    (local greet #(print "Hello World!"))
    
    (map! [n] :gH 'greet ; optionally quote to explicitly indicate a function
          "greets the world!")
<


AUTOCMDS                                                   *hibiscus-autocmds*

                                                           *hibiscus-augroup!*

augroup!                               (augroup! {name} {cmds})


Defines autocmd group of {name} with {cmds} containing [args pattern cmd]
chunks

ARGUMENTS: ~

{args} can contain the following values:

>
    [ :nested :once :desc <desc> BufRead Filetype ...etc ]
<


EXAMPLES: ~

>
    ;; -------------------- ;;
    ;;      VIMSCRIPT       ;;
    ;; -------------------- ;;
    (augroup! :spell
      [[FileType] [markdown gitcommit] "setlocal spell"])
    
    (augroup! :MkView
      [[BufWinLeave
        BufLeave
        BufWritePost
        BufHidden
        QuitPre :nested] ?* "silent! mkview!"]
      [[BufWinEnter] ?* "silent! loadview"])
    
    (augroup! :buffer-local
      [[Event] '(buffer 0) "echo 'hello'"])
    
    
    ;; -------------------- ;;
    ;;        FENNEL        ;;
    ;; -------------------- ;;
    (augroup! :highlight-yank
      [[TextYankPost :desc "highlights yanked region."]
       * #(vim.highlight.on_yank {:timeout 80})])
    
    (local greet #(print "Hello World!"))
    
    (augroup! :greet
      [[BufRead] *.sh '(print :HOLLA)]
      [[BufRead] *    'hello] ; remember to quote functions to indicate they are callbacks
<


COMMANDS                                                   *hibiscus-commands*

                                                           *hibiscus-command!*

command!                               (command! {args} {lhs} {rhs})


Defines user command {lhs} to {rhs}

ARGUMENTS: ~

{args} can contain the same opts as `nvim_create_user_command`:

>
    [
      :bar      <boolean>
      :bang     <boolean>
      :buffer   <boolean>
      :register <boolean>
      :range    (or <boolean> <string>)
      :addr     <string>
      :count    <string>
      :nargs    <string>
      :complete (or <string> <function>)
    ]
<


EXAMPLES: ~

>
    ;; -------------------- ;;
    ;;      VIMSCRIPT       ;;
    ;; -------------------- ;;
    (command! [:range "%"] :Strip "<line1>,<line2>s: \\+$::e")
    
    
    ;; -------------------- ;;
    ;;        FENNEL        ;;
    ;; -------------------- ;;
    (fn greet [opts]
      (print :hello opts.args))
    
    (command! [:nargs 1 :complete #["world"]] :Greet 'greet) ; quoting is optional
    
    (command! [:bang true] :Lhs #(print $.bang))
<


MISC                                                           *hibiscus-misc*

                                                               *hibiscus-exec*

exec                                   (exec {cmds})


Converts [cmd] chunks in {cmds} to valid vim.cmd call

EXAMPLE: ~

>
    (exec [
      [:set "nowrap"]
      [:echo "hello" "world"]
    ])
<


                                                             *hibiscus-concat*

concat                                 (concat {list} {sep})


Concats strings in {list} with {sep} at compile time

EXAMPLES: ~

>
    (concat ["hello" "foo"] " ") ; -> "hello foo"
    
    (concat ["hello" "foo" var] " ") ; -> "hello foo" .. " " .. var
<


VIM OPTIONS                                             *hibiscus-vim-options*

                                                               *hibiscus-set!*

set!                                   Works like command `:set`, sets vim
                                       option {name}


>
    (set! nobackup)
    (set! tabstop 4)
    
    (each [_ opt (ipairs ["number" "rnu"])]
          (set! opt true))
<


                                                          *hibiscus-setlocal!*

setlocal!                              Works like command `:setlocal`, sets
                                       local vim option {name}


>
    (setlocal! filetype "md")
    (setlocal! number)
<


                                                         *hibiscus-setglobal!*

setglobal!                             Works like command `:setglobal`, sets
                                       only the global vim option {name}
                                       without changing the local value


>
    (setglobal! wrap)
<


                                                               *hibiscus-set+*

set+                                   Appends {val} to string-style option
                                       {name}


>
    (set+ wildignore "*.foo")
<


                                                               *hibiscus-set^*

set^                                   Prepends {val} to string-style option
                                       {name}


>
    (set^ wildignore ["*.foo" "*.baz"])
<


                                                               *hibiscus-rem!*

rem!                                   Removes {val} from string-style option
                                       {name}


>
    (rem! wildignore "*.baz")
<


                                                             *hibiscus-color!*

color!                                 Sets vim colorscheme to {name}


>
    (color! desert)
<


VARIABLES                                                 *hibiscus-variables*

                                                                 *hibiscus-g!*

g!                                     Sets global variable {name} to {val}.


>
    (g! mapleader " ")
<


                                                                 *hibiscus-b!*

b!                                     Sets buffer scoped variable {name} to
                                       {val}.


>
    (b! gretting "Hello World!")
<


==============================================================================
5. Core Macros                                          *hibiscus-core-macros*

>
    (require-macros :hibiscus.core)
    ; or
    (import-macros {: fstring} :hibiscus.core)
<


FSTRING                                                     *hibiscus-fstring*

>
    (fstring {str})
<



  wrapper around string.format, works like javascript’s template literates



- `${...}` is parsed as variable
- `$(...)` is parsed as fennel code


EXAMPLES: ~

>
    (local name "foo")
    (fstring "hello ${name}")
    
    (fstring "${name}: two + four is $(+ 2 4).")
<


PRETTY PRINT                                           *hibiscus-pretty-print*

>
    (dump {...})
<



  pretty prints {…} into human readable form


GENERAL                                                     *hibiscus-general*

>
    (or= {x} ...)
<



  checks if {x} is equal to any one of {…}


CHECKING VALUES                                     *hibiscus-checking-values*

>
    (nil? {x})
<



  checks if value of {x} is nil


>
    (empty? {x})
<



  checks if {x} :: [string or table] is empty


>
    (boolean? {x})
<



  checks if {x} is of boolean type


>
    (string? {x})
<



  checks if {x} is of string type


>
    (number? {x})
<



  checks if {x} is of number type


>
    (odd? {int})
<



  checks if {int} is of odd parity


>
    (even? {int})
<



  checks if {int} is of even parity


>
    (fn? {x})
<



  checks if {x} is of function type


>
    (table? {x})
<



  checks if {x} is of table type


>
    (seq? {tbl})
<



  checks if {tbl} is valid list / array


UNARY OPERATORS                                     *hibiscus-unary-operators*

>
    (inc {int})
<



  increments {int} by 1 and returns its value


>
    (++ {var})
<



  increments variable {var} by 1 and returns its value


>
    (dec {int})
<



  decrements {int} by 1 and returns its value


>
    (-- {var})
<



  decrements variable {var} by 1 and returns its value


STRING CONCAT                                         *hibiscus-string-concat*

>
    (append {var} {str})
<



  appends {str} to variable {var}


>
    (tappend {tbl} {key} {str})
<



  appends {str} to {key} of table {tbl}


>
    (prepend {var} {str})
<



  prepends {str} to variable {var}


>
    (tprepend {tbl} {key} {str})
<



  prepends {str} to {key} of table {tbl}


TABLE MERGING                                         *hibiscus-table-merging*

>
    (merge-list {list1} {list2})
<



  merges all values of {list1} and {list2} together, and returns a new list


>
    (merge-tbl {tbl1} {tbl2})
<



  merges {tbl2} onto {tbl1}, and returns a new table


>
    (merge {tbl1} {tbl2})
<



  merges {tbl1} and {tbl2}, correctly appending lists


>
    (merge! {var} {tbl})
<



  merges values of {tbl} onto variable {var}


==============================================================================
6. End Credits                                          *hibiscus-end-credits*


- aniseed <https://github.com/Olical/aniseed>: for introducing me to fennel
- zest <https://github.com/tsbohc/zest.nvim>: for inspiring `hibiscus.vim` macros


Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
