*hibiscus.txt*                            Opinionated fennel macros for neovim

==============================================================================
Table of Contents                                 *hibiscus-table-of-contents*

1. Hibiscus.nvim                                      |hibiscus-hibiscus.nvim|
  - Rational                                               |hibiscus-rational|
2. Installation                                        |hibiscus-installation|
3. Packer Macros                                      |hibiscus-packer-macros|
4. Neovim Macros                                      |hibiscus-neovim-macros|
  - keymaps                                                 |hibiscus-keymaps|
  - autocmds                                               |hibiscus-autocmds|
  - commands                                               |hibiscus-commands|
  - vimscript                                             |hibiscus-vimscript|
  - misc                                                       |hibiscus-misc|
  - vim options                                         |hibiscus-vim-options|
  - variables                                             |hibiscus-variables|
5. Core Macros                                          |hibiscus-core-macros|
  - OOP                                                         |hibiscus-oop|
  - class!                                                   |hibiscus-class!|
  - general                                                 |hibiscus-general|
  - checking values                                 |hibiscus-checking-values|
  - number                                                   |hibiscus-number|
  - string                                                   |hibiscus-string|
  - table                                                     |hibiscus-table|
6. End Credits                                          |hibiscus-end-credits|

==============================================================================
1. Hibiscus.nvim                                      *hibiscus-hibiscus.nvim*

Highly opinionated macros to elegantly write your neovim config.

Companion library for tangerine
<https://github.com/udayvir-singh/tangerine.nvim>, but it can also be used
standalone.


RATIONAL                                                   *hibiscus-rational*


- Syntactic eye candy over hellscape of lua api
- Provides missing features in both fennel and nvim api


==============================================================================
2. Installation                                        *hibiscus-installation*


- Create file `plugin/0-tangerine.lua` to bootstrap hibiscus:

>lua
    -- ~/.config/nvim/plugin/0-tangerine.lua
    
    -- pick your plugin manager, default [standalone]
    local pack = "tangerine" or "packer" or "paq"
    
    local function bootstrap(url, ref)
        local name = url:gsub(".*/", "")
        local path = vim.fn.stdpath [[data]] .. "/site/pack/".. pack .. "/start/" .. name
    
        if vim.fn.isdirectory(path) == 0 then
            print(name .. ": installing in data dir...")
    
            vim.fn.system {"git", "clone", url, path}
            if ref then
                vim.fn.system {"git", "-C", path, "checkout", ref}
            end
    
            vim.cmd [[redraw]]
            print(name .. ": finished installing")
        end
    end
    
    -- for stable version [recommended]
    bootstrap("https://github.com/udayvir-singh/hibiscus.nvim", "v1.5")
    
    -- for git head
    bootstrap("https://github.com/udayvir-singh/hibiscus.nvim")
<


- Require a macro library at top of your fennel modules:

>fennel
    ; require all macros
    (require-macros :hibiscus.core)
    (require-macros :hibiscus.vim)
    
    ; require specific macros [you can also rename them]
    (import-macros {:fstring! f!} :hibiscus.core)
    (import-macros {: map!}       :hibiscus.vim)
<

Now start using these macros in your config

------------------------------------------------------------------------------

PACKER ~

You can use packer to manage hibiscus afterwards [use this if you haven’t
used `ref` option in bootstrap]:

>fennel
    (require-macros :hibiscus.packer)
    
    (packer-setup!)
    
    (packer!
      (use! :udayvir-singh/hibiscus.nvim))
<


PAQ ~

>fennel
    (local paq (require :paq))
    
    (paq {
      :udayvir-singh/hibiscus.nvim
    })
<


==============================================================================
3. Packer Macros                                      *hibiscus-packer-macros*

>fennel
    (require-macros :hibiscus.packer)
<


packer-setup!                                                  *packer-setup!*

(packer-setup! {opts*})

Bootstraps packer and calls packer.init function with {opts*}.


packer!                                                              *packer!*

(packer! {…})

Wrapper around packer.startup function, automatically adds packer to plugin
list and syncs it.


use!                                                                    *use!*

(use! {name} {…opts})

Much more lisp friendly wrapper over `packer.use` function.


EXTRA OPTIONS: ~


- `require` – wrapper around `config`, loads string or list of module names.
- `depends` – wrapper around `requires`, configures plugin dependencies with lisp friendly syntax.


EXAMPLES: ~

>fennel
    (packer!
      (use! :udayvir-singh/hibiscus.nvim)
    
      (use! :plugin-foo
            :require ["path.mod1" "path.mod2"]) ; automatically requires these modules
    
      (use! :plugin-baz
            :depends [  ; define dependencies in same syntax as use!
              "example1"
              ["example2" :after "hibiscus.nvim" :require "xyz"]
            ]))
<


==============================================================================
4. Neovim Macros                                      *hibiscus-neovim-macros*

>fennel
    (require-macros :hibiscus.vim)
    ; or
    (import-macros {: augroup!} :hibiscus.vim)
<


KEYMAPS                                                     *hibiscus-keymaps*


map!                                                                    *map!*

(map! {args} {lhs} {rhs} {desc*})

Defines vim keymap for the given modes from {lhs} to {rhs}.


ARGUMENTS: ~

{args} can contain the following values:

>fennel
    ; modes |                   options                           |
    [ nivcx  :remap :verbose :buffer :nowait :expr :unique :script ]
<


- `verbose`: opposite to `silent`
- `remap`: opposite to `noremap`


EXAMPLES: ~

>fennel
    ;; -------------------- ;;
    ;;      VIMSCRIPT       ;;
    ;; -------------------- ;;
    (map! [n :buffer] :R "echo &rtp")
    (map! [n :remap]  :P "<Plug>(some-function)")
    
    
    ;; -------------------- ;;
    ;;        FENNEL        ;;
    ;; -------------------- ;;
    (map! [nv :expr] :j
          `(if (> vim.v.count 0) "j" "gj"))
    
    (local greet #(print "Hello World!"))
    
    (map! [n] :gH `greet ; optionally quote to explicitly indicate a function
          "greets the world!")
<


AUTOCMDS                                                   *hibiscus-autocmds*


augroup!                                                            *augroup!*

(augroup! {name} {cmds})

Defines autocmd group of {name} with {cmds} containing [args pattern cmd]
chunks.


ARGUMENTS: ~

{args} can contain the following values:

>fennel
    [ :nested :once :desc <desc> BufRead Filetype ...etc ]
<


EXAMPLES: ~

>fennel
    ;; -------------------- ;;
    ;;      VIMSCRIPT       ;;
    ;; -------------------- ;;
    (augroup! :spell
      [[FileType] [markdown gitcommit] "setlocal spell"])
    
    (augroup! :MkView
      [[BufWinLeave
        BufLeave
        BufWritePost
        BufHidden
        QuitPre :nested] ?* "silent! mkview!"]
      [[BufWinEnter] ?* "silent! loadview"])
    
    (augroup! :buffer-local
      [[Event] `(buffer 0) "echo 'hello'"])
    
    
    ;; -------------------- ;;
    ;;        FENNEL        ;;
    ;; -------------------- ;;
    (augroup! :highlight-yank
      [[TextYankPost :desc "highlights yanked region."]
       * #(vim.highlight.on_yank {:timeout 80})])
    
    (local greet #(print "Hello World!"))
    
    (augroup! :greet
      [[BufRead] *.sh `(print :HOLLA)]
      [[BufRead] *    `hello] ; remember to quote functions to indicate they are callbacks
<


COMMANDS                                                   *hibiscus-commands*


command!                                                            *command!*

(command! {args} {lhs} {rhs})

Defines user command {lhs} to {rhs}.


ARGUMENTS: ~

{args} can contain the same opts as `nvim_create_user_command`:

>fennel
    [
      :bar      <boolean>
      :bang     <boolean>
      :buffer   <boolean>
      :register <boolean>
      :range    (or <boolean> <string>)
      :addr     <string>
      :count    <string>
      :nargs    <string>
      :complete (or <string> <function>)
    ]
<


EXAMPLES: ~

>fennel
    ;; -------------------- ;;
    ;;      VIMSCRIPT       ;;
    ;; -------------------- ;;
    (command! [:range "%"] :Strip "<line1>,<line2>s: \\+$::e")
    
    
    ;; -------------------- ;;
    ;;        FENNEL        ;;
    ;; -------------------- ;;
    (fn greet [opts]
      (print :hello opts.args))
    
    (command! [:nargs 1 :complete #["world"]] :Greet `greet) ; quoting is optional in command! macro
    
    (command! [:bang true] :Lhs #(print $.bang))
<


VIMSCRIPT                                                 *hibiscus-vimscript*


exec!                                                                  *exec!*

(exec! {…})

Translates commands written in fennel to `vim.cmd` calls.


EXAMPLE: ~

>fennel
    (exec!
      ; setting highlights
      [hi! link TSInclude Special]
      [hi! DiagnosticVirtualTextError guibg=NONE]
    
      ; calling vimscript functions
      [echo (resolve (expand "~/path"))]
    
      ; injecting commands by quoting [dangerous]
      [echo `(.. "'" variable "'")])
<

Lua output:

>lua
    vim.cmd("hi! link TSInclude Special")
    vim.cmd("hi! DiagnosticVirtualTextError guibg=NONE")
    vim.cmd("echo resolve(expand('~/path'))")
    vim.cmd("echo '" .. variable .. "'")
<


MISC                                                           *hibiscus-misc*


concat!                                                              *concat!*

(concat! {sep} {…})

Smartly concats all values in {…} with {sep} at compile time. Useful for
breaking down large strings without any overhead.


EXAMPLE: ~

>fennel
    (concat! "\n"
      "first line"
      "second line"
      "third line") ; => "first line\nsecond line\nthird line"
<


VIM OPTIONS                                             *hibiscus-vim-options*


set!                                                                    *set!*

Works like command `:set`, sets vim option {name}.

>fennel
    (set! nobackup)
    (set! tabstop 4)
    
    (each [_ opt (ipairs ["number" "rnu"])]
          (set! opt true))
<


setlocal!                                                          *setlocal!*

Works like command `:setlocal`, sets local vim option {name}.

>fennel
    (setlocal! filetype "md")
    (setlocal! number)
<


setglobal!                                                        *setglobal!*

Works like command `:setglobal`, sets global vim option {name} without changing
the local value.

>fennel
    (setglobal! wrap)
<


set+                                                                    *set+*

Appends {val} to string-style option {name}.

>fennel
    (set+ wildignore "*.foo")
<


set^                                                                    *set^*

Prepends {val} to string-style option {name}.

>fennel
    (set^ wildignore ["*.foo" "*.baz"])
<


rem!                                                                    *rem!*

Removes {val} from string-style option {name}.

>fennel
    (rem! wildignore "*.baz")
<


color!                                                                *color!*

Sets vim colorscheme to {name}.

>fennel
    (color! desert)
<


VARIABLES                                                 *hibiscus-variables*


g!                                                                        *g!*

Sets global variable {name} to {val}.

>fennel
    (g! mapleader " ")
<


b!                                                                        *b!*

Sets buffer scoped variable {name} to {val}.

>fennel
    (b! gretting "Hello World!")
<


==============================================================================
5. Core Macros                                          *hibiscus-core-macros*

>fennel
    (require-macros :hibiscus.core)
    ; or
    (import-macros {: fstring} :hibiscus.core)
<


OOP                                                             *hibiscus-oop*


CLASS!                                                       *hibiscus-class!*

(class! {name} {…})

Defines a new class (object-oriented programming) with {name}.

An `init` method must be present in all classes and it should return the base
table for class.

To create a instance of class, call `new` method on {name}.


EXAMPLES: ~

>fennel
    ;; -------------------- ;;
    ;;   DEFINING CLASSES   ;;
    ;; -------------------- ;;
    (class! stack
      (method! init [list] list) ; arguments of new method are passed here
    
      (method! push [val]
        "inserts {val} into the stack."
        (table.insert self val)) ; self variable is accessible from all methods
    
      (metamethod! __tostring []
        "converts stack into a string."
        (table.concat self " ")))
    
    (class! stack-stream
      (local state {:cursor 0})
    
      (method! init [stack]
        (set state.len (# stack)) ; private state
        {: stack})                ; public state
    
      (method! next []
        "returns next item from stream."
        (++ state.cursor)
        (assert (<= state.cursor state.len)
                "stack-stream: attempt to call next() on empty stream.")
        (. self.stack state.cursor)))
    
    
    ;; -------------------- ;;
    ;;         DEMO         ;;
    ;; -------------------- ;;
    (local st (stack:new [:a :b])) ; new method should be called to create a instance
    (st:push :c)
    (print (tostring st)) ; => "a b c"
    
    (local stream (stack-stream:new st))
    (print (stream:next)) ; => "a"
    (print (stream:next)) ; => "b"
<


method!                                                              *method!*

(method! {name} {args} {…})

Defines a method within the scope of class.

The `self` variable is accessible from the scope of every method.


EXAMPLE: ~

>fennel
    (class! foo
      (method! init [] {}) ; required for all classes
    
      (method! hello []
        (print "hello world!")))
<


metamethod!                                                      *metamethod!*

(metamethod! {name} {args} {…})

Defines a metamethod within the scope of class.

The `self` variable is accessible from the scope of every metamethod.

See lua docs for list of valid metamethods.


EXAMPLE: ~

>fennel
    (class! foo
      (method! init [] {}) ; required for all classes
    
      (metamethod! __tostring []
        "example_string"))
<


instanceof?                                                      *instanceof?*

(instanceof? {val} {class})

Checks if {val} is an instance of {class}.


EXAMPLE: ~

>fennel
    (class! foo
      (method! init [] {}))
    
    (local x (foo:new))
    
    (instanceof? x foo)  ; => true
    (instanceof? {} foo) ; => false
<


GENERAL                                                     *hibiscus-general*


dump!                                                                  *dump!*

(dump! {…})

Pretty prints {…} into human readable form.


or=                                                                      *or=*

(or= {x} {…})

Checks if {x} is equal to any one of {…}.


fstring!                                                            *fstring!*

(fstring! {str})

Wrapper around string.format, works like javascript’s template literates.


- `${...}` is parsed as variable
- `$(...)` is parsed as fennel code


EXAMPLES: ~

>fennel
    (local name "foo")
    (fstring! "hello ${name}")
    
    (fstring! "${name}: two + four is $(+ 2 4).")
<


enum!                                                                  *enum!*

(enum! {name} …)

Defines enumerated values for names.


EXAMPLE: ~

>fennel
    (enum! A B C) ; A=1, B=2, C=3
<


time!                                                                  *time!*

(time! {label} …)

Prints execution time of {…} in milliseconds.


EXAMPLE: ~

>fennel
    (time! :add
      (+ 1 2)) ; add: [XXX]ms
<


CHECKING VALUES                                     *hibiscus-checking-values*

>fennel
    (nil? {x})
<

checks if value of {x} is nil.

>fennel
    (empty? {x})
<

checks if {x} :: [string or table] is empty.

>fennel
    (boolean? {x})
<

checks if {x} is of boolean type.

>fennel
    (string? {x})
<

checks if {x} is of string type.

>fennel
    (number? {x})
<

checks if {x} is of number type.

>fennel
    (odd? {int})
<

checks if {int} is of odd parity.

>fennel
    (even? {int})
<

checks if {int} is of even parity.

>fennel
    (fn? {x})
<

checks if {x} is of function type.

>fennel
    (table? {x})
<

checks if {x} is of table type.

>fennel
    (seq? {tbl})
<

checks if {tbl} is valid list / array.


NUMBER                                                       *hibiscus-number*

>fennel
    (inc! {int})
<

increments {int} by 1 and returns its value.

>fennel
    (++ {variable})
<

increments {variable} by 1 and returns its value.

>fennel
    (dec! {int})
<

decrements {int} by 1 and returns its value.

>fennel
    (-- {variable})
<

decrements {variable} by 1 and returns its value.


STRING                                                       *hibiscus-string*

>fennel
    (append! {variable} {str})
<

appends {str} to {variable}.

>fennel
    (tappend! {tbl} {key} {str})
<

appends {str} to {key} of table {tbl}.

>fennel
    (prepend! {variable} {str})
<

prepends {str} to {variable}.

>fennel
    (tprepend! {tbl} {key} {str})
<

prepends {str} to {key} of table {tbl}.

>fennel
    (split! {str} {sep})
<

splits {str} into a list at each {sep}.


TABLE                                                         *hibiscus-table*

>fennel
    (tmap! {tbl} {handler})
<

maps values in {tbl} with {handler}. > {handler} takes in (key, val) and
returns a new value.

>fennel
    (filter! {list} {handler})
<

filters values in {list} with {handler}. > {handler} takes in (val) and returns
a boolean.

>fennel
    (merge-list! {list1} {list2})
<

merges all values of {list1} and {list2} together, and returns a new list.

>fennel
    (merge-tbl! {tbl1} {tbl2})
<

merges {tbl2} onto {tbl1}, and returns a new table.

>fennel
    (merge! {tbl1} {tbl2})
<

merges {tbl1} and {tbl2}, correctly appending lists.

>fennel
    (vmerge! {variable} {tbl})
<

merges values of {tbl} onto {variable}.


==============================================================================
6. End Credits                                          *hibiscus-end-credits*


- aniseed <https://github.com/Olical/aniseed>: for introducing me to fennel
- zest <https://github.com/tsbohc/zest.nvim>: for inspiring `hibiscus.vim` macros

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
